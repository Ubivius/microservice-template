replicaCount: 1

image:
  repository: ubiviushub/microservice-template
  tag: 0.0.0
  pullPolicy: Always

annotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: /metrics
  prometheus.io/port: "8888"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

readinessProbe:
  httpGet:
    path: /health/ready
    port: 9090

livenessProbe:
  httpGet:
    path: /health/live 
    port: 9090
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

env:
  - name: DB_HOSTNAME
    valueFrom:
      configMapKeyRef:
        name: mongodb
        key: hostname
  - name: DB_PORT
    valueFrom:
      configMapKeyRef:
        name: mongodb
        key: port
  - name: DB_USERNAME
    valueFrom:
      configMapKeyRef:
        name: mongodb
        key: username
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: mongodb
        key: mongodb-root-password

# Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true

  # If set to false, installs ClusterRole and ClusterRoleBinding so microservice-template can be used across namespaces.
  # If set to true, installs namespace-specific Role and RoleBinding and requires provider configuration be set to that same namespace
  namespaced: false

# Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBindin or ClusterRoleBinding
podSecurityPolicy:
  enabled: false

serviceAccount:
 # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9090
  otherPorts:
    - port: 8888
      name: metrics

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

ingressRoute:
  enabled: true
  match: Host(`template.player.dev.ubivius.tk`) && PathPrefix(`/`)
  tls:
    secretName: template.player.dev.ubivius.tk

resources:
  requests:
    cpu: 10m
    memory: 30Mi
  limits:
    cpu: 10m
    memory: 30Mi

nodeSelector: {}

tolerations: []

affinity: {}
